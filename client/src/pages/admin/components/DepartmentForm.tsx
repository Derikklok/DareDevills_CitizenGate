import { useState } from "react";
import { useAuth } from "@clerk/clerk-react";
import type { Department, CreateDepartmentDto, UpdateDepartmentDto } from "@/lib/admin/types";
import { createDepartment, updateDepartment } from "@/lib/admin/departmentApi";

interface DepartmentFormProps {
  department?: Department;
  onSave: (department: Department) => void;
  onCancel: () => void;
}

const DepartmentForm = ({ department, onSave, onCancel }: DepartmentFormProps) => {
  const isEditMode = !!department;
  const { getToken } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [formData, setFormData] = useState({
    name: department?.name || "",
    description: department?.description || "",
    address: department?.address || "",
    contact_email: department?.contact_email || "",
    contact_phone: department?.contact_phone || "",
    clerk_org_id: department?.clerk_org_id || ""
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const token = await getToken();
      if (!token) {
        setError("Authentication required");
        return;
      }

      let savedDepartment: Department;
      
      if (isEditMode && department) {
        // Update existing department
        const updateData: UpdateDepartmentDto = {
          name: formData.name,
          description: formData.description || null,
          address: formData.address,
          contact_email: formData.contact_email,
          contact_phone: formData.contact_phone,
          clerk_org_id: formData.clerk_org_id // Required for PUT requests
        };
        
        savedDepartment = await updateDepartment(department.department_id, updateData, token);
      } else {
        // Create new department
        const createData: CreateDepartmentDto = {
          name: formData.name,
          description: formData.description || null,
          address: formData.address,
          contact_email: formData.contact_email,
          contact_phone: formData.contact_phone
          // clerk_org_id is not included as it's generated by the server
        };
        
        savedDepartment = await createDepartment(createData, token);
      }
      
      onSave(savedDepartment);
    } catch (err) {
      console.error("Error saving department:", err);
      setError(err instanceof Error ? err.message : "An error occurred while saving the department");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-bold mb-4">
        {isEditMode ? "Edit Department" : "Add New Department"}
      </h2>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
            Department Name*
          </label>
          <input
            id="name"
            name="name"
            type="text"
            required
            value={formData.name}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            rows={3}
            value={formData.description || ""}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <div>
          <label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-1">
            Address*
          </label>
          <input
            id="address"
            name="address"
            type="text"
            required
            value={formData.address}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="contact_email" className="block text-sm font-medium text-gray-700 mb-1">
              Email*
            </label>
            <input
              id="contact_email"
              name="contact_email"
              type="email"
              required
              value={formData.contact_email}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>

          <div>
            <label htmlFor="contact_phone" className="block text-sm font-medium text-gray-700 mb-1">
              Phone*
            </label>
            <input
              id="contact_phone"
              name="contact_phone"
              type="tel"
              required
              value={formData.contact_phone}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
        </div>

        {/* Hidden field for clerk_org_id, needed for updates but not for creation */}
        {isEditMode && (
          <input
            type="hidden"
            id="clerk_org_id"
            name="clerk_org_id"
            value={formData.clerk_org_id}
          />
        )}

        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90 disabled:opacity-50"
          >
            {loading ? "Saving..." : isEditMode ? "Update Department" : "Create Department"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default DepartmentForm;
